generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(READER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Blog Models
model Post {
  id          String       @id @default(cuid())
  slug        String       @unique
  title       String
  description String?
  content     String       @db.Text
  coverUrl    String?
  published   Boolean      @default(false)
  featured    Boolean      @default(false)
  views       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  publishedAt DateTime?
  authorId    String
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  Category[]
  tags        Tag[]
  comments    Comment[]
  seoMetadata SeoMetadata?

  @@index([slug])
  @@index([authorId])
  @@index([published])
  @@index([createdAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]

  @@index([slug])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
}

model SeoMetadata {
  id              String  @id @default(cuid())
  title           String?
  description     String?
  keywords        String?
  ogImage         String?
  ogTitle         String?
  ogDescription   String?
  twitterCard     String?
  twitterTitle    String?
  twitterDescription String?
  canonicalUrl    String?
  postId          String  @unique
  post            Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EDITOR
  READER
}
